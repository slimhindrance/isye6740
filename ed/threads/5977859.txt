Thread ID: 5977859
User 1323477 (Parent Post) says:
<document version="2.0"><paragraph>Hi there, I've been on question 3 for days and would really appreciate some help. I've definitely spent more than 20 hours on this 1 problem and I'm panicking. FYI, I'm using a lot of the demo code. </paragraph><paragraph><bold>Main concerns I'm facing:</bold> </paragraph><paragraph><bold>1. Comparing l2 norm vs l1 norm speed and iterations.</bold> Depending on implementation, is it possible for 1 norm to be faster than the other for 1 person, and vice versa for another? My understanding is that, <italic>generally speaking</italic><bold>,</bold> l2 norm should run faster and in less iterations than l1 norm.</paragraph><paragraph><bold>2. I'm not sure how to go about coding convergence.</bold> Following the demo code, I'm iterating through a max of 200 iterations. Not sure if that's correct since there are no instructions about that. The following is my code to check for if the l2 centers will converge. This comes AFTER defining the new centers for a particular iteration.</paragraph><figure><image src="https://static.us.edusercontent.com/files/ZuIINuN2VvrBXjjTnYvMJbkD" width="658" height="101.9935414424112"/></figure><paragraph>Because of <bold>issue #1^</bold>, I think I'm doing something wrong here. I understand I can use np.linalg.norm as well. For l1 norm convergence, I'm doing dis = np.sum(np.abs(old_cent - c), axis = 0). Additionally, I saw that for the kmeans animation demo code, a <bold>while loop</bold> was provided for convergence. <bold>However</bold>, when I used the exact same while loop and same conditions, the cell just wouldn't stop running, like it timed out. Especially with an even smaller convergence criteria of 0.00001</paragraph><paragraph><bold>3. My results for l2 norm images and l1 norm images look very similar.</bold> By this, I mean if you were to compare the image for an arbitrary cluster amount for l2 norm to its respective l1 norm image, they will look pretty much the same to the naked eye. Again, this seems suspicious to me because I don't think this should be the case..</paragraph><paragraph><bold>4. Finding the best k.</bold> For 3.3, what does "what is your best k" mean? Like the best k out of [3, 6, 12, 24, 48]? Or the best k overall? I'm genuinely not sure how to go about that so any advice here would be much appreciated.</paragraph><paragraph><bold>5. Am I on the right track?</bold> Am I near the end of this question? I still need to move on to question 4.</paragraph></document>

Answer from User 672141:
1. Your intuition is correct that one distance usually runs faster than the other. This is a persistent observation regardless of seed, and should give similar results between students.

2. The current code for convergence looks fine to me and is good for the submission. The while loop should work as well, but maybe increase to a larger threshold to test if it stops.

3. When we are asking for comparison, the focus is mostly on performance: runtime & iterations. I think that comparing image quality without any additional metrics (specific to images) could be difficult indeed and is not required for this question.

4. Find the best k out of the sample list [3,6,12,24,48]. There are statistical methods and heuristics used to find the best k, for this you can search using external sources. 

5. Yes, you are doing well! 

  Comment from User 1323477:
  Thanks so much for the response! Is 200 iterations sufficient? The while loop still seems to not be working for me. For my k=48, I seem to be hitting the max of 200, which concerns me

Additionally, my l1 norm is running faster and in less iterations than my l2 norm. As I said earlier, my understanding is that, generally speaking, l2 should run more efficiently. Do you have tips for troubleshooting this? Or is this something I shouldn't be worried about?

